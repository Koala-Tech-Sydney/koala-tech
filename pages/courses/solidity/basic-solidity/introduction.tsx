import Image from "next/image";
import Link from "next/link";

import {
  Subtitle1,
  Subtitle2,
  Paragraph,
  Hyperlink,
  HotKey,
  FeaturedText,
} from "../../../../components/Text/Text";
import Chapter from "../../../../components/Course/Chapter";
import { solidityCourse } from "..";
import SolidityFormatter from "../../../../components/Formatter/SolidityFormatter";

const Introduction = () => {
  return (
    <Chapter course={solidityCourse}>
      <Paragraph>
        We’ll be starting our journey using a simple smart contract written in
        Solidity so as to give you a quick glance of the core building blocks of
        a Solidity smart contract. This smart contract can be used to store an
        integer on the blockchain.
      </Paragraph>
      <Paragraph>
        First of all, we need an IDE for writing Solidity contracts and we’ll be
        using <Hyperlink href="https://remix.ethereum.org">Remix</Hyperlink>,
        which is a popular browser-based IDE specialized for writing smart
        contracts on Ethereum.
      </Paragraph>
      <Paragraph>
        You’ll be seeing some folders and files in the file explorers, they
        might not be exactly the same because Remix is updated quite frequently.
        But the only folder you need to care about is the{" "}
        <FeaturedText>contracts</FeaturedText> folder. Hover your mouse over,
        right click on it and select New File to create a new file.
      </Paragraph>
      <Image
        src="/images/courses/solidity/introduction/remix-new-file.png"
        alt="Creating new file in the contracts folder"
        height="489"
        width="546"
      />
      <Paragraph>
        Name the file as <FeaturedText>Storage.sol</FeaturedText>, all your
        Solidity scripts end with .sol.
      </Paragraph>
      <Image
        src="/images/courses/solidity/introduction/remix-storage.png"
        alt="Storage.sol location"
        height="232"
        width="214"
      />
      <Paragraph>
        You can omit all other files in your workspace for now, they are just
        sample files generated by Remix, most likely you won’t need them. Now,
        paste the following content in <FeaturedText>Storage.sol</FeaturedText>.
      </Paragraph>
      <SolidityFormatter>{`// SPDX-License-Identifier: GPL-3.0
 
pragma solidity >=0.7.0 <0.9.0;

contract Storage {
  
    uint256 number;

    function store(uint256 num) public {
        number = num;
    }

    function retrieve() public view returns (uint256){
        return number;
    }
}`}</SolidityFormatter>
      <Paragraph>
        In most smart contract scripts, there is a SPDX License Identifier on
        top which specifies the kind of license that your script has. That’s
        because trust in smart contracts can be better established if their
        source code is available. Since making source code available always
        touches on legal problems with regards to copyright, the Solidity
        compiler encourages the use of machine-readable SPDX license
        identifiers. Every source file should start with a comment indicating
        its license and the compiler will include the supplied string in the
        bytecode metadata.
      </Paragraph>
      <SolidityFormatter
        showLineNumbers={false}
      >{`// SPDX-License-Identifier: MIT`}</SolidityFormatter>
      <Paragraph>
        If you do not want to specify a license or if the source code is not
        open-source, you can use the special value UNLICENSED.
      </Paragraph>
      <SolidityFormatter
        showLineNumbers={false}
      >{`// SPDX-License-Identifier: UNLICENSED`}</SolidityFormatter>
      <Paragraph>
        In line 3, there is a special keyword called{" "}
        <FeaturedText>pragma</FeaturedText> in Solidity, this keyword is used to
        enable certain compiler features or checks. A pragma directive is always
        local to a source file, so you have to add the pragma to all your files
        if you want to enable it in your whole project. If you import another
        file, the pragma from that file does not apply to the importing file.
      </Paragraph>
      <Paragraph>
        Because solidity is a constantly updating language, every Solidity file
        should specify the Solidity version to ensure the contract behaves the
        way it’s intended. The line below asks the compiler to use any of the
        Solidity versions larger than or equal to 0.6.0 but less than 0.9.0.
      </Paragraph>
      <SolidityFormatter
        showLineNumbers={false}
      >{`pragma solidity >=0.7.0 <0.9.0;`}</SolidityFormatter>
      <Paragraph>This specifies the exact version 0.6.0.</Paragraph>
      <SolidityFormatter
        showLineNumbers={false}
      >{`pragma solidity 0.6.0;`}</SolidityFormatter>
      <Paragraph>
        This specifies any versions above 0.6.0 and below 0.7.0.
      </Paragraph>
      <SolidityFormatter
        showLineNumbers={false}
      >{`pragma solidity ^0.6.0;`}</SolidityFormatter>
      <Paragraph>
        From line 5 to 16, it defines a contract called{" "}
        <FeaturedText>Storage</FeaturedText>, the{" "}
        <FeaturedText>contract</FeaturedText> keyword is similar to the{" "}
        <FeaturedText>class</FeaturedText> keyword in other programming
        languages, but rather than defining a blueprint of a class object, it
        defines a blueprint of a smart contract which will be instantiated when
        the contract is deployed on the Ethereum network. It’s not required to
        name your contract the same as the name of your script but it’s
        recommended to do so.
      </Paragraph>
      <SolidityFormatter showLineNumbers={false}>{`contract Storage {
 
    uint256 number;

    function store(uint256 num) public {
        number = num;
    }

    function retrieve() public view returns (uint256){
       return number;
   }
}`}</SolidityFormatter>
      <Paragraph>
        At line 7, we declared a state variable, which is a variable whose value
        is permanently stored in the contract. If you are coming from other
        programming languages you could consider a state variable as an instance
        variable, so each state variable belongs to an instance of the contract.
      </Paragraph>
      <SolidityFormatter
        showLineNumbers={false}
      >{`    uint256 number;`}</SolidityFormatter>
      <Paragraph>
        From line 9 to 11, we declared a public function called{" "}
        <FeaturedText>store</FeaturedText> which takes in an unsigned 256-bit
        integer called num as its argument. The{" "}
        <FeaturedText>public</FeaturedText> keyword means it is a function that
        can be used anywhere.
      </Paragraph>
      <SolidityFormatter
        showLineNumbers={false}
      >{`    function store(uint256 num) public {
        number = num;
    }`}</SolidityFormatter>
      <Paragraph>
        From line 13 to 15, we again declared a public function, but this time
        it doesn’t take in any argument and it returns an unsigned 256-bit
        integer. The <FeaturedText>view</FeaturedText> keyword tells the
        compiler that this is a special kind of function called a view function,
        that means this function doesn’t modify any state variables in the
        contract, it only retrieves the value of the state variable.
      </Paragraph>
      <SolidityFormatter
        showLineNumbers={false}
      >{`    function retrieve() public view returns (uint256){
        return number;
    }`}</SolidityFormatter>
      <Paragraph>
        Now we understand how this contract works, we’ll deploy it on a
        blockchain so that an instance of this smart contract will be created
        and we can interact with it.
      </Paragraph>
      <Paragraph>
        In the left panel, choose the second tab which says{" "}
        <FeaturedText>Solidity compiler</FeaturedText>
        when you hover on top. Select a compiler which matches the compiler
        version you specified in the pragma. In this case, we are choosing
        0.8.13.
      </Paragraph>
      <Paragraph>
        For convenience, you can check the{" "}
        <FeaturedText>Auto compile</FeaturedText> option, in this case, whenever
        you make changes to the scripts within the contracts folder they will
        get compiled automatically. You can also compile the scripts by holding{" "}
        <HotKey>Ctrl + X</HotKey> on Windows or <HotKey>Cmd + X</HotKey> on Mac
        machines. Alternatively, you can just click on the blue button which
        says <FeaturedText>Compile [filename]</FeaturedText>.
      </Paragraph>
      <Paragraph>
        The optimization option could be checked if you want to reduce the cost
        of deploying your smart contract. The higher optimization level you
        instruct the compiler to perform, the lower the cost of deployment, but
        the higher the cost of interacting with the smart contract after it’s
        deployed on the blockchain. If you are unfamiliar with the concepts we
        just said here, it’s highly recommended for you to go through our{" "}
        <Link href="/courses/blockchain">blockchain course</Link>. In short, you
        need to pay for deploying a smart contract on a blockchain or modifying
        the state variables in a contract after it’s deployed, these fees are
        called the transaction fees and the currency you are using to pay on the
        Ethereum blockchain is called ether.
      </Paragraph>
      <Paragraph>
        Last but not least, make sure you are selecting the contract that you
        want to compile.
      </Paragraph>
      <Image
        src="/images/courses/solidity/introduction/remix-compiler.png"
        alt="Storage.sol location"
        height="425"
        width="275"
      />
      <Paragraph>
        Once we have got the contract compiled, we can deploy it. We’ll be
        deploying the contract on a virtual machine, i.e. a simulated
        blockchain. Make sure you have chosen JavaScript VM as your environment.
        Remix has provided you with a lot of testing accounts, each of them
        contains testing ethers for you to pay for the transaction fee and
        manipulate. The account that you have selected will be paying the
        transaction fee for deploying the smart contract so you should be seeing
        the amount of ethers it owns decrease after you click the{" "}
        <FeaturedText>Deploy</FeaturedText> button. Before clicking the{" "}
        <FeaturedText>Deploy</FeaturedText> button, be sure you are selecting
        the compiled contract that you want to deploy, in this case, it’s our
        Storage contract. After selecting the right contract, you can proceed to
        press the <FeaturedText>Deploy</FeaturedText> button.
      </Paragraph>
      <Image
        src="/images/courses/solidity/introduction/remix-deploy.png"
        alt="Remix Deploy and Run Transactions"
        height="691"
        width="552"
      />
      <Paragraph>
        After the deployment has succeeded, you will see an output message of
        the virtual machine in the console which specifies the details of this
        transaction. The console is located at the bottom of Remix.
      </Paragraph>
      <Image
        src="/images/courses/solidity/introduction/remix-vm-output.png"
        alt="Remix Deploy and Run Transactions"
        height="456"
        width="1224"
      />
      <Paragraph>
        For example, you can see the transaction fee above is 126577 wei, since
        1 ether = 1018 wei, we can see that by adding the transaction fee to our
        current balance, it adds up perfectly to 100 ethers, which is our
        original balance of the account.
      </Paragraph>
      <Image
        src="/images/courses/solidity/introduction/account-balance-after-deployment.png"
        alt="account balance after deploying a contract"
        height="165"
        width="507"
      />
      <Paragraph>
        Now, our contract is deployed, we can start playing with it. In the{" "}
        <FeaturedText>Deploy &amp; run transactions</FeaturedText> tab, you
        should be able to see all the contracts deployed by you. Each
        transaction is deployed at a specific address on the blockchain, as you
        can see below, the contract we just deployed is located at
        0xd9145CCE52D386f254917e481eB44e9943F39138 (yours will likely be
        different). Remix provides us with an easy-to-use user interface to call
        the functions included in this contract. Below, we have a{" "}
        <FeaturedText>store</FeaturedText> function, which is a state-changing
        function (indicated by the color orange). State-changing functions are
        functions that make changes to the state of the blockchain therefore you
        need to pay a gas fee to call them.{" "}
        <FeaturedText>retrieve</FeaturedText> is a view function (indicated by
        the color blue). View functions are functions that return the value of
        the state variables in the blockchain and you don’t need to pay a gas
        fee to call them.
      </Paragraph>
      <Image
        src="/images/courses/solidity/introduction/deployed-contract.png"
        alt="deployed smart contracts"
        height="567"
        width="442"
      />
      <Paragraph>
        You can call the retrieve function on this contract by clicking on the
        blue retrieve button, it will return the value 0 because that’s the
        default value of an integer if you didn’t initialize it when you deploy
        the contract.
      </Paragraph>
      <Image
        src="/images/courses/solidity/introduction/retrieve-0.png"
        alt="deployed smart contracts"
        height="196"
        width="409"
      />
      <Paragraph>
        To call the store function, you can specify the new value and then press
        the orange store button.
      </Paragraph>
      <Image
        src="/images/courses/solidity/introduction/store-99.png"
        alt="deployed smart contracts"
        height="195"
        width="403"
      />
      <Paragraph>
        Once the function call has completed, you’ll see that you account
        balance has decreased again, that’s because you have just called a
        state-changing function
      </Paragraph>
      <Image
        src="/images/courses/solidity/introduction/new-account-balance.png"
        alt="deployed smart contracts"
        height="163"
        width="465"
      />
      <Paragraph>
        Now if you call the retrieve function again, it’ll show the new value
        99.
      </Paragraph>
      <Image
        src="/images/courses/solidity/introduction/retrieve-99.png"
        alt="deployed smart contracts"
        height="187"
        width="394"
      />
      <Paragraph>
        Congratulations! You have now understood the basics of a Solidity smart
        contract and how to compile and deploy it using Remix.
      </Paragraph>
    </Chapter>
  );
};

export default Introduction;
